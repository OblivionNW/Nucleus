/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.commands;

import io.github.nucleuspowered.nucleus.Nucleus;
import io.github.nucleuspowered.nucleus.internal.annotations.command.NoModifiers;
import io.github.nucleuspowered.nucleus.internal.annotations.command.Permissions;
import io.github.nucleuspowered.nucleus.internal.annotations.command.RegisterCommand;
import io.github.nucleuspowered.nucleus.internal.command.AbstractCommand;
import io.github.nucleuspowered.nucleus.internal.command.NucleusParameters;
import io.github.nucleuspowered.nucleus.internal.docgen.annotations.EssentialsEquivalent;
import io.github.nucleuspowered.nucleus.internal.permissions.PermissionInformation;
import io.github.nucleuspowered.nucleus.internal.permissions.SuggestedLevel;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import org.spongepowered.api.command.CommandResult;
import org.spongepowered.api.command.CommandSource;
import org.spongepowered.api.command.args.CommandContext;
import org.spongepowered.api.command.args.CommandElement;
import org.spongepowered.api.command.args.GenericArguments;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.cause.Cause;
import org.spongepowered.api.util.annotation.NonnullByDefault;

import java.util.HashMap;
import java.util.Map;

@Permissions(supportsOthers = true)
@NoModifiers
@NonnullByDefault
@RegisterCommand({"god", "invuln", "invulnerability"})
@EssentialsEquivalent({"god", "godmode", "tgm"})
public class GodCommand extends AbstractCommand<CommandSource> {

    public static final String PVP_OVERRIDE = "pvp.override";
    public static final String PVP_DISABLE = "pvp.disable";

    @Override
    public Map<String, PermissionInformation> permissionSuffixesToRegister() {
        Map<String, PermissionInformation> m = new HashMap<>();
        m.put("pvp.override", PermissionInformation.getWithTranslation("permission.god.pvp.override", SuggestedLevel.ADMIN));
        m.put("pvp.disable", PermissionInformation.getWithTranslation("permission.god.pvp.disable", SuggestedLevel.NONE));
        return m;
    }

    @Override
    public CommandElement[] getArguments() {
        return new CommandElement[] {
                GenericArguments.optionalWeak(GenericArguments.onlyOne(
                        requirePermissionArg(NucleusParameters.ONE_PLAYER, this.permissions.getOthers()))),
                NucleusParameters.OPTIONAL_ONE_TRUE_FALSE
        };
    }

    @Override
    public CommandResult executeCommand(CommandSource src, CommandContext args, Cause cause) throws Exception {
        Player pl = getUserFromArgs(Player.class, src, NucleusParameters.Keys.PLAYER, args);
        InvulnerabilityService service = getServiceUnchecked(InvulnerabilityService.class);
        boolean god = args.<Boolean>getOne(NucleusParameters.Keys.BOOL).orElse(!service.isInvulnerable(pl));

        service.setInvulnerable(pl, god);
        if (!pl.equals(src)) {
            src.sendMessages(Nucleus
                    .getNucleus().getMessageProvider().getTextMessageWithFormat(god ? "command.god.player.on" : "command.god.player.off", pl.getName()));
        }

        pl.sendMessage(Nucleus.getNucleus().getMessageProvider().getTextMessageWithFormat(god ? "command.god.on" : "command.god.off"));
        return CommandResult.success();
    }
}

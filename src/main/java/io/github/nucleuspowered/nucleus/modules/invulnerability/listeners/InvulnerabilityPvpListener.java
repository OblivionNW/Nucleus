/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.Nucleus;
import io.github.nucleuspowered.nucleus.api.exceptions.NucleusException;
import io.github.nucleuspowered.nucleus.internal.interfaces.ListenerBase;
import io.github.nucleuspowered.nucleus.modules.invulnerability.commands.GodCommand;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfigAdapter;
import io.github.nucleuspowered.nucleus.modules.invulnerability.services.InvulnerabilityService;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.cause.entity.damage.source.EntityDamageSource;
import org.spongepowered.api.event.entity.AttackEntityEvent;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.filter.cause.Root;

public class InvulnerabilityPvpListener implements ListenerBase.Conditional {

    private final InvulnerabilityService service = getServiceUnchecked(InvulnerabilityService.class);
    private final String overridePerm = getPermissionHandlerFor(GodCommand.class).getPermissionWithSuffix(GodCommand.PVP_OVERRIDE);
    private final String disablePerm = getPermissionHandlerFor(GodCommand.class).getPermissionWithSuffix(GodCommand.PVP_DISABLE);

    @Listener
    public void onAttack(AttackEntityEvent event, @Root EntityDamageSource source, @Getter("getTargetEntity") Entity entity) {
        if (source.getSource() instanceof Player) {
            Player playerSource = (Player) source.getSource();
            if (this.service.isInvulnerable(playerSource) && !hasPermission(playerSource, this.overridePerm) && entity instanceof Player) {
                event.setCancelled(true);
            }

            if (entity instanceof Player) {
                Player playerTarget = (Player) entity;
                if (this.service.isInvulnerable(playerSource) && hasPermission(playerSource, this.disablePerm)) {
                    try {
                        this.service.setInvulnerable(playerSource, false);
                        playerSource.sendMessage(Nucleus
                                .getNucleus().getMessageProvider().getTextMessageWithFormat("command.god.off", playerSource.getName()));
                    } catch (NucleusException ex) {
                        event.setCancelled(true);
                    }
                }

                if (this.service.isInvulnerable(playerTarget) && hasPermission(playerTarget, this.disablePerm)) {
                    try {
                        this.service.setInvulnerable(playerTarget, false);
                        playerTarget.sendMessage(Nucleus
                                .getNucleus().getMessageProvider().getTextMessageWithFormat("command.god.off", playerSource.getName()));
                    } catch (NucleusException ex) {
                        event.setCancelled(true);
                    }
                }
            }
        }


    }

    @Override
    public boolean shouldEnable() {
        return getServiceUnchecked(InvulnerabilityConfigAdapter.class).getNodeOrDefault().isDisablePvpOnGod();
    }
}
